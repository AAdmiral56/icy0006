library(readr)
library(ggplot2)
library(tidyr)
library(data.table)
wine_classes <- fread("/home/aadmiral/Documents/math/Wine.csv")
summary(wine_classes$`Wine class`)
print(sqrt(var(wine_classes$`Wine class`)))
library(readr)
library(ggplot2)
library(tidyr)
library(data.table)
wine_classes <- fread("/home/aadmiral/Documents/math/Wine.csv")
summary(wine_classes$`Wine class`)
print(var(wine_classes$`Wine class`))
library(readr)
library(ggplot2)
library(tidyr)
library(data.table)
wine_classes <- fread("/home/aadmiral/Documents/math/Wine.csv")
summary(wine_classes$`Wine class`)
print(sqrt(var(wine_classes$`Wine class`)))
print(mean(wine_classes$`Wine class`))
library(readr)
library(ggplot2)
library(tidyr)
library(data.table)
wine_classes <- fread("/home/aadmiral/Documents/math/Wine.csv")
summary(wine_classes$`Wine class`)
print(sqrt(var(wine_classes$`Wine class`)))
print(prod(wine_classes$`Wine class`)^(1 / length(wine_classes$`Wine class`)))
summary(wine_classes$`Wine class`)
print(sqrt(var(wine_classes$`Wine class`)))
# Print Geometric Mean
print(prod(wine_classes$`Wine class`)^(1 / length(wine_classes$`Wine class`)))
# Print Harmonic Mean
print(1 / mean(1 / wine_classes$`Wine class`))
# Generate frequency table
y <- table(wine_classes$`Wine class`)
# Print frequency table
print(y)
# Mode of x
m <- names(y)[which(y == max(y))]
# Print mode
print(m)
install.packages("Hmisc")
library(Hmisc)
library(readr)
library(ggplot2)
library(tidyr)
library(data.table)
wine_classes <- fread("/home/aadmiral/Documents/math/Wine.csv")
corrclass <- rcorr(as.matrix(wine_classes))
library(corrplot)
corrplot(corrclass$r)
install.packages(car)
library(car)
scatterplot(mpg ~ wt | cyl, data=wine_classes,
main="Wine Classes",
labels=row.names(mtcars))
install.packages(car)
library(car)
install.packages(car)
library(hplot)
install.packages("Hmisc")
library(Hmisc)
library(readr)
library(ggplot2)
library(tidyr)
library(data.table)
wine_classes <- fread("/home/aadmiral/Documents/math/Wine.csv")
corrclass <- rcorr(as.matrix(wine_classes))
library(corrplot)
corrplot(corrclass$r)
scatterplot(mpg ~ wt | cyl, data=wine_classes,
main="Wine Classes",
labels=row.names(mtcars))
install.packages("Hmisc")
library(ggplot2)
library(tidyr)
library(data.table)
wine_classes <- fread("/home/aadmiral/Documents/math/Wine.csv")
corrclass <- rcorr(as.matrix(wine_classes))
library(corrplot)
corrplot(corrclass$r)
scatterplot(mpg ~ wt | cyl, data=wine_classes,
main="Wine Classes",
labels=row.names(mtcars))
ibrary(ggplot2)
library(tidyr)
library(data.table)
wine_classes <- fread("/home/aadmiral/Documents/math/Wine.csv")
corrclass <- rcorr(as.matrix(wine_classes))
library(corrplot)
corrplot(corrclass$r)
ggplot(data = corrclass, aes(x = drat, y = mpg)) + geom_point()
library(ggplot2)
library(tidyr)
library(data.table)
wine_classes <- fread("/home/aadmiral/Documents/math/Wine.csv")
corrclass <- rcorr(as.matrix(wine_classes))
library(corrplot)
corrplot(corrclass$r)
ggplot(corrclass, aes(x = drat, y = mpg)) + geom_point()
ggplot(wine_classes, aes(x = drat, y = mpg)) + geom_point()
ggplot(wine_classes, aes(x, y)) + geom_point()
ggplot(wine_classes) + geom_point()
dbinom(3, size=12, prob=1/42)
print(dbinom(2, size=5, prob=1/22) * dbinom(0, size=2, prob=1/22))
# Print mode
print(m)
print(dbinom(2, size=5, prob=1/22))
print(dbinom(2, size=5, prob=1/22) * dbinom(0, size=2, prob=1/22))
print(dbinom(2, size=5, prob=1/22) * dbinom(0, size=2))
print(dbinom(2, size=5, prob=1/22) * dbinom(0, size=2, prob=1/3))
choose(59,1)
choose(59,1)/59
print((choose(6,1)*choose(42,1))/choose(48,6))
print((choose(6,1)*choose(42,5))/choose(48,6))
print((choose(6,1)*choose(42,5))/choose(48,6))
print(((1/6)*choose(6,1)*choose(42,5))/choose(48,6))
print((choose(6,2)*choose(42,4))/choose(48,6))
print(((1/6)*choose(6,2)*choose(42,4))/choose(48,6))
print((choose(6,3)*choose(42,3))/choose(48,6))
print(((1/6)*choose(6,3)*choose(42,3))/choose(48,6))
print((choose(6,4)*choose(42,2))/choose(48,6))
print(((1/6)*choose(6,4)*choose(42,2))/choose(48,6))
print((choose(6,5)*choose(42,1))/choose(48,6))
print(((1/6)*choose(6,5)*choose(42,1))/choose(48,6))
print((choose(6,6)*choose(42,0))/choose(48,6))
print(((1/6)*choose(6,6)*choose(42,0))/choose(48,6))
wine_classes <- fread("/home/aadmiral/Documents/math/Wine.csv")
View(wine_classes)
qplot(wine_classes$`Wine class`)
summary(wine_classes$`Wine class`)
qplot(wine_classes$Alcohol)
summary(wine_classes$Alcohol)
qplot(wine_classes$`Malic acid`)
qplot(wine_classes$Ash)
qplot(wine_classes$`Alcalinity of ash`)
qplot(wine_classes$`Magnesium`)
qplot(wine_classes$`Total phenols
`)
qplot(wine_classes$`Flavanoids
`)
qplot(wine_classes$`Nonflavanoid phenols`)
qplot(wine_classes$Proanthocyanins)
qplot(wine_classes$`Color intensity
`)
qplot(wine_classes$Hue)
qplot(wine_classes$`OD280/OD315`)
qplot(wine_classes$Proline)
library(readr)
library(ggplot2)
library(tidyr)
library(data.table)
#------STAGE 1------------------------------------------------------------
wine_classes <- fread("/home/aadmiral/Documents/math/Wine.csv")
View(wine_classes)
qplot(wine_classes$`Wine class`)
summary(wine_classes$`Wine class`)
qplot(wine_classes$Alcohol)
summary(wine_classes$Alcohol)
qplot(wine_classes$`Malic acid`)
qplot(wine_classes$Ash)
qplot(wine_classes$`Alcalinity of ash`)
qplot(wine_classes$`Magnesium`)
qplot(wine_classes$`Total phenols
`)
qplot(wine_classes$`Flavanoids
`)
qplot(wine_classes$`Nonflavanoid phenols`)
qplot(wine_classes$Proanthocyanins)
qplot(wine_classes$`Color intensity
`)
qplot(wine_classes$Hue)
qplot(wine_classes$`OD280/OD315`)
qplot(wine_classes$Proline)
library(Hmisc)
library(readr)
library(ggplot2)
library(tidyr)
library(data.table)
wine_classes <- fread("/home/aadmiral/Documents/math/Wine.csv")
corrclass <- rcorr(as.matrix(wine_classes))
print(corrclass)
library(corrplot)
library(corrgram)
corrplot(corrclass$r) #total phenols and flavanoid seem to be the most dependent on each other
x <- wine_classes$`Flavanoids`
y <- wine_classes$`Total phenols`
plot(x, y, main = "Flavanoids vs total phenols",
xlab = "flavanoids", ylab = "total phenols",
pch = 19, frame = FALSE)
abline(lm(y ~ x, data = wine_classes), col = "blue")
linearReg <- lm(x ~ y, data=wine_classes)
print(linearReg)
x <- wine_classes$`Flavanoids`
y <- wine_classes$`Wine class`
plot(x, y, main = "Flavanoids vs wine class",
xlab = "flavanoids", ylab = "wine class",
pch = 19, frame = FALSE)
abline(lm(y ~ x, data = wine_classes), col = "blue")
linearReg <- lm(x ~ y, data=wine_classes)
print(linearReg)
x <- wine_classes$`Flavanoids`
y <- wine_classes$Hue
plot(x, y, main = "Flavanoids vs hue",
xlab = "flavanoids", ylab = "hue",
pch = 19, frame = FALSE)
abline(lm(y ~ x, data = wine_classes), col = "blue")
linearReg <- lm(x ~ y, data=wine_classes)
print(linearReg)
x <- wine_classes$`Wine class`
y <- wine_classes$Hue
plot(x, y, main = "wine class vs hue",
xlab = "wine class", ylab = "hue",
pch = 19, frame = FALSE)
abline(lm(y ~ x, data = wine_classes), col = "blue")
linearReg <- lm(x ~ y, data=wine_classes)
print(linearReg)
x <- wine_classes$`Wine class`
y <- wine_classes$`OD280/OD315`
plot(x, y, main = "wine class vs OD280/OD315",
xlab = "wine class", ylab = "OD280/OD315",
pch = 19, frame = FALSE)
abline(lm(y ~ x, data = wine_classes), col = "blue")
linearReg <- lm(x ~ y, data=wine_classes)
print(linearReg)
install.packages("MLmetrics")
library(MLmetrics)
pred <- predict(linearReg, df_test)
output <- rbind(df_test, pred)
summary(df_train)
summary(output)
library(dplyr)
library(ggplot2)
library(caTools)
library(corrgram)
#Step 1
sample_size = floor(0.8*nrow(wine_classes))
set.seed(777)
any(is.na(wine_classes))
ggplot(data=wine_classes, aes(x=wine_classes$`Flavanoids`, y=wine_classes$`Nonflavanoid phenols`)) + geom_point(aes(color=wine_classes$`Wine class`,size=10, alpha=0.7))
corrgram(wine_classes, lower.panel=panel.shade, upper.panel=panel.cor)
picked = sample(seq_len(nrow(wine_classes)),size = sample_size)
df_train =wine_classes[picked,]
df_test =wine_classes[-picked,]
print(df_train)
print(df_test)
summary(df_train)
summary(wine_classes)
#Step 2
corrplot(corrclass$r)
x <- df_train$`Flavanoids`
y <- df_train$`Total phenols`
plot(x, y, main = "Flavanoids vs total phenols",
xlab = "flavanoids", ylab = "total phenols",
pch = 19, frame = FALSE)
abline(lm(y ~ x, data = df_train), col = "blue")
linearReg <- lm(x ~ y, data=df_train)
print(linearReg)
x <- df_train$`Flavanoids`
y <- df_train$`Wine class`
plot(x, y, main = "Flavanoids vs wine class",
xlab = "flavanoids", ylab = "wine class",
pch = 19, frame = FALSE)
abline(lm(y ~ x, data = df_train), col = "blue")
linearReg <- lm(x ~ y, data=df_train)
print(linearReg)
x <- df_train$`Flavanoids`
y <- df_train$Hue
plot(x, y, main = "Flavanoids vs hue",
xlab = "flavanoids", ylab = "hue",
pch = 19, frame = FALSE)
abline(lm(y ~ x, data = df_train), col = "blue")
linearReg <- lm(x ~ y, data=df_train)
print(linearReg)
x <- df_train$`Wine class`
y <- df_train$Hue
plot(x, y, main = "wine class vs hue",
xlab = "wine class", ylab = "hue",
pch = 19, frame = FALSE)
abline(lm(y ~ x, data = df_train), col = "blue")
linearReg <- lm(x ~ y, data=df_train)
print(linearReg)
x <- df_train$`Wine class`
y <- df_train$`OD280/OD315`
plot(x, y, main = "wine class vs OD280/OD315",
xlab = "wine class", ylab = "OD280/OD315",
pch = 19, frame = FALSE)
abline(lm(y ~ x, data = df_train), col = "blue")
linearReg <- lm(y ~ x, data=df_train)
print(linearReg)
library(MLmetrics)
pred <- predict(linearReg, df_test)
output <- rbind(df_test, pred)
summary(df_train)
summary(output)
MAPE(y_pred = exp(output$fitted.values), y_true = output$Ash)
pred <- predict(linearReg, df_test)
output <- rbind(df_test, pred)
print(df_test)
print(linearReg)
pred <- predict(linearReg, df_test)
output <- rbind(df_test, pred)
output <- rbind(df_test, use.names, pred)
output <- rbind(df_test, pred)
output <- rbind(df_test, pred, use.names=TRUE)
output <- rbindlist(list(df_test, pred), use.names=TRUE)
pred <- predict(linearReg, df_test)
output <- rbindlist(list(df_test, pred), use.names=TRUE)
print(linearReg) + summary(linearReg)
summary(linearReg)
pred <- predict(linearReg, df_test)
RSS <- c(crossprod(output$Ash))
output <- rbindlist(list(df_test, pred), use.names=TRUE)
output <- rbind(df_test, pred, use.names=TRUE)
summary(linearReg)
pred <- predict(linearReg, df_test)
print(pred)
pred_frame <- data.frame(cbind(actuals=df_test$`OD280/OD315`, predicteds=pred))
View(pred_frame)
View(pred_frame)
correlation_accuracy <- cor(pred_frame)
View(correlation_accuracy)
print(correlation_accuracy)
min_max_accuracy <- mean(apply(pred_frame, 1, min) / apply(pred_frame, 1, max))
mape <- mean(abs((pred_frame$predicteds - pred_frame$actuals))/pred_frame$actuals)
print(mape)
print(min_max_accuracy)
AIC(linearReg)
BIC(linearReg)
print(df_test)
View(df_test)
summary(linearReg)$r.squared
summary(pred)
summary(pred_frame)
library(MLmetrics)
print(df_test)
print(linearReg)
summary(linearReg)$r.squared
AIC(linearReg)
BIC(linearReg)
pred <- predict(linearReg, df_test)
#output <- rbind(df_test, pred, use.names=TRUE)
pred_frame <- data.frame(cbind(actuals=df_test$`OD280/OD315`, predicteds=pred))
summary(pred)
summary(pred_frame)
correlation_accuracy <- cor(pred_frame)
print(correlation_accuracy)
min_max_accuracy <- mean(apply(pred_frame, 1, min) / apply(pred_frame, 1, max))
mape <- mean(abs((pred_frame$predicteds - pred_frame$actuals))/pred_frame$actuals)
print(min_max_accuracy)
print(mape)
plot(linearReg$residuals, col="blue", lwd=2, ylab="Residuals", las=1, main ='Residuals:wine class vs OD280/OD315')
RMSE(pred_frame$predicteds, pred_frame$actuals)
MAE(pred_frame$predicteds, pred_frame$actuals)
min_max_accuracy <- mean(apply(pred_frame, 1, min) / apply(pred_frame, 1, max))
mape <- mean(abs((pred_frame$predicteds - pred_frame$actuals))/pred_frame$actuals)
RMSE(pred_frame$predicteds, pred_frame$actuals)
MAE(pred_frame$predicteds, pred_frame$actuals)
print(min_max_accuracy)
print(mape)
summary(linearReg)$r.squared
correlation_accuracy <- cor(pred_frame)
print(correlation_accuracy)
min_max_accuracy <- mean(apply(pred_frame, 1, min) / apply(pred_frame, 1, max))
mape <- mean(abs((pred_frame$predicteds - pred_frame$actuals))/pred_frame$actuals)
RMSE(pred_frame$predicteds, pred_frame$actuals)
MAE(pred_frame$predicteds, pred_frame$actuals)
print(min_max_accuracy)
print(mape)
res_plot <- plot(linearReg$residuals, col="blue", lwd=2, ylab="Residuals", las=1, main ='Residuals:wine class vs OD280/OD315')
abline(res_plot, col = "blue")
res_plot <- plot(linearReg$residuals, col="blue", lwd=2, ylab="Residuals", las=1, main ='Residuals:wine class vs OD280/OD315') +
abline(res_plot, col = "blue")
res_plot <- plot(linearReg$residuals, col="blue", lwd=2, ylab="Residuals", las=1, main ='Residuals:wine class vs OD280/OD315') +
abline(res_plot, col = "blue")
summary(pred_frame)
correlation_accuracy <- cor(pred_frame)
print(correlation_accuracy)
min_max_accuracy <- mean(apply(pred_frame, 1, min) / apply(pred_frame, 1, max))
mape <- mean(abs((pred_frame$predicteds - pred_frame$actuals))/pred_frame$actuals)
RMSE(pred_frame$predicteds, pred_frame$actuals)
MAE(pred_frame$predicteds, pred_frame$actuals)
print(min_max_accuracy)
print(mape)
RMSE(pred_frame$predicteds, df_test$`OD280/OD315`)
data.frame(MAPE = MAPE(pred, df_test$`OD280/OD315`),
RMSE = RMSE(pred, df_test$`OD280/OD315`),
MAE = MAE(pred, df_test$`OD280/OD315`))
correlation_accuracy <- cor(pred_frame)
print(correlation_accuracy)
min_max_accuracy <- mean(apply(pred_frame, 1, min) / apply(pred_frame, 1, max))
mape <- mean(abs((pred_frame$predicteds - pred_frame$actuals))/pred_frame$actuals)
RMSE(pred_frame$predicteds, pred_frame$actuals)
MAE(pred_frame$predicteds, pred_frame$actuals)
print(min_max_accuracy)
print(mape)
x <- pred_frame$actuals
y <- output$`OD280/OD315`
plot(x, y, main = "wine class vs OD280/OD315",
xlab = "wine class", ylab = "OD280/OD315",
pch = 19, frame = FALSE)
abline(lm(y ~ x, data = df_train), col = "blue")
x <- pred_frame$actuals
y <- pred_frame$predicteds
plot(x, y, main = "wine class vs OD280/OD315",
xlab = "wine class", ylab = "OD280/OD315",
pch = 19, frame = FALSE)
abline(lm(y ~ x, data = df_train), col = "blue")
x <- pred_frame$predicteds
y <- pred_frame$actuals
plot(x, y, main = "wine class vs OD280/OD315",
xlab = "wine class", ylab = "OD280/OD315",
pch = 19, frame = FALSE)
abline(lm(y ~ x, data = df_train), col = "blue")
